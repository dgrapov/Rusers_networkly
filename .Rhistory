get_edges(obj,color=color,width=size,name=name,type=type,hoverinfo="none",showlegend=FALSE)
obj
get_edges(obj,color=color,width=size,name=name,type=type,hoverinfo="none",showlegend=FALSE)
get_edges(obj,color=NULL,width=size,name=name,type=type,hoverinfo="none",showlegend=FALSE)
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
get_edges(obj,color=NA,width=NA,name=name,type=type,hoverinfo="none",showlegend=FALSE)
tmp<-data.frame(1:5)
tmp
tmp<-t(tmp)
tmp
tmp<-data.frame(tmp)
tmp
tmp[,NULL]
tmp[,NULL][1]
get_edges<-function(obj,color="color",width="size",name="names",type="2d",...){
#set net opts
if(type == "2d"){
opts<-list(mode="lines",type="scatter",...)
} else {
opts<-list(mode="lines",type="scatter3d",...)
}
#split list for element mapping (could be done together?)
# mappings<-obj$edges[,c(color,width),drop=FALSE]
segs<-rep(1:(nrow(obj$edges)/2),each=2)
# if(!is.null(mappings)){
#   id<-lapply(1:nrow(mappings),function(i){
#     paste(paste(mappings[i,],collapse="_"),segs[i])
#   })
#   id<-unlist(id)
#   el<-split(obj$edges,id)
#
# } else {
el<-split(obj$edges,segs) # split all
# }
#need to split into induvidual segments, for 3d and size maping to work
#generate elements
res<-list()
for (i in 1:length(el)){
tmp<-el[[i]]
res[[i]]<-c(list(x=tmp$x,
y=tmp$y,
z=tmp$z,
name = tryCatch(tmp[,name][1],error=function(e){NULL}), # TODO: fix hack
line=list(
color = tryCatch(rgb_col(tmp[,color])[1],error=function(e){NULL}),
width = tryCatch(as.numeric(as.character(tmp[,width][1]))),error=function(e){NULL}) # why is this a factor?
),opts)
}
return(res)
}
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
get_edge
get_edges
tryCatch(tmp[,NULL][1],error=NULL)
tryCatch(tmp[,NULL][1],error=function(e){NULL}
)
debug(get_edges)
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
tryCatch(tmp[,name][1],error=function(e){NULL})
tryCatch(rgb_col(tmp[,color])[1],error=function(e){NULL})
tryCatch(as.numeric(as.character(tmp[,width][1]))),error=function(e){NULL})
tryCatch(as.numeric(as.character(tmp[,width][1]))),error=function(e){NULL})
tryCatch(as.numeric(as.character(tmp[,width][1])),error=function(e){NULL})
get_edges<-function(obj,color="color",width="size",name="names",type="2d",...){
#set net opts
if(type == "2d"){
opts<-list(mode="lines",type="scatter",...)
} else {
opts<-list(mode="lines",type="scatter3d",...)
}
#split list for element mapping (could be done together?)
# mappings<-obj$edges[,c(color,width),drop=FALSE]
segs<-rep(1:(nrow(obj$edges)/2),each=2)
# if(!is.null(mappings)){
#   id<-lapply(1:nrow(mappings),function(i){
#     paste(paste(mappings[i,],collapse="_"),segs[i])
#   })
#   id<-unlist(id)
#   el<-split(obj$edges,id)
#
# } else {
el<-split(obj$edges,segs) # split all
# }
#need to split into induvidual segments, for 3d and size maping to work
#generate elements
res<-list()
for (i in 1:length(el)){
tmp<-el[[i]]
res[[i]]<-c(list(x=tmp$x,
y=tmp$y,
z=tmp$z,
name = tryCatch(tmp[,name][1],error=function(e){NULL}), # TODO: fix hack
line=list(
color = tryCatch(rgb_col(tmp[,color])[1],error=function(e){NULL}),
width = tryCatch(as.numeric(as.character(tmp[,width][1])),error=function(e){NULL}) # why is this a factor?
),opts)
}
return(res)
}
get_edges<-function(obj,color="color",width="size",name="names",type="2d",...){
#set net opts
if(type == "2d"){
opts<-list(mode="lines",type="scatter",...)
} else {
opts<-list(mode="lines",type="scatter3d",...)
}
#split list for element mapping (could be done together?)
# mappings<-obj$edges[,c(color,width),drop=FALSE]
segs<-rep(1:(nrow(obj$edges)/2),each=2)
# if(!is.null(mappings)){
#   id<-lapply(1:nrow(mappings),function(i){
#     paste(paste(mappings[i,],collapse="_"),segs[i])
#   })
#   id<-unlist(id)
#   el<-split(obj$edges,id)
#
# } else {
el<-split(obj$edges,segs) # split all
# }
#need to split into induvidual segments, for 3d and size maping to work
#generate elements
res<-list()
for (i in 1:length(el)){
tmp<-el[[i]]
res[[i]]<-c(list(x=tmp$x,
y=tmp$y,
z=tmp$z,
name = tryCatch(tmp[,name][1],error=function(e){NULL}), # TODO: fix hack
line=list(
color = tryCatch(rgb_col(tmp[,color])[1],error=function(e){NULL}),
width = tryCatch(as.numeric(as.character(tmp[,width][1])),error=function(e){NULL})) # why is this a factor?
),opts)
}
return(res)
}
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE)
get_text(obj,node.data,text=name,extra=list(textfont=list(size=40)),type=type,yoff=-10,hoverinfo="none",showlegend=FALSE)
#create plotting attributes
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=40)),type=type,yoff=-10,hoverinfo="none",showlegend=FALSE))
legend<-format_legend(obj,node.data=node.data)
net<-shiny_ly(net2) # with legend?
net2<-c(net,c(get_edges(legend,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=TRUE),get_nodes(legend,node.data=legend$node.data,color=color,size=size,name=name,type=type,hoverinfo="name",showlegend=TRUE)))
net<-shiny_ly(net2) # with legend?
layout(net,
xaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'),
yaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'))
plotly::layout(net,
xaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'),
yaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'))
obj
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
format_legend(obj,node.data=node.data)
node.data
obj
node.data
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=40)),type=type,yoff=-10,hoverinfo="none",showlegend=FALSE))
net<-shiny_ly(net)
net
#' @title get_edges
#' @export
get_edges<-function(obj,color="color",width="size",name="names",type="2d",...){
#set net opts
if(type == "2d"){
opts<-list(mode="lines",type="scatter",...)
} else {
opts<-list(mode="lines",type="scatter3d",...)
}
#split list for element mapping (could be done together?)
# mappings<-obj$edges[,c(color,width),drop=FALSE]
segs<-rep(1:(nrow(obj$edges)/2),each=2)
# if(!is.null(mappings)){
#   id<-lapply(1:nrow(mappings),function(i){
#     paste(paste(mappings[i,],collapse="_"),segs[i])
#   })
#   id<-unlist(id)
#   el<-split(obj$edges,id)
#
# } else {
el<-split(obj$edges,segs) # split all
# }
#need to split into induvidual segments, for 3d and size maping to work
#generate elements
res<-list()
for (i in 1:length(el)){
tmp<-el[[i]]
res[[i]]<-c(list(x=tmp$x,
y=tmp$y,
z=tmp$z,
name = tryCatch(tmp[,name][1],error=function(e){NULL}), # TODO: fix hack
line=list(
color = tryCatch(rgb_col(tmp[,color])[1],error=function(e){rgb_col("gray")}),
width = tryCatch(as.numeric(as.character(tmp[,width][1])),error=function(e){5})) # why is this a factor?
),opts)
}
return(res)
}
library(network)
nodes<-as.matrix(V(karate))
node.data<-data.frame(ID=nodes,group=as.matrix(memb))
#add color
node.data$color<-rainbow(length(unique(node.data$group)))[factor(node.data$group)]
#add size based on centrality
#rescale to 20-60
library(scales)
node.data$size<-rescale(closeness(karate, mode="all"),to=c(10,20))
head(node.data)
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
rgb_col<-function(col){
lapply(col,function(x){
rgb<-col2rgb(x, alpha = FALSE)[,1]
paste0('rgb(',paste(rgb,collapse=","),")",collapse="")
}) %>% unlist()
}
rgb_col<-function(col){
lapply(col,function(x){
rgb<-col2rgb(x, alpha = FALSE)[,1]
paste0('rgb(',paste(rgb,collapse=","),")",collapse="")
}) %>% unlist()
}
#create plotting attributes
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
net<-shiny_ly(net)
net
net[[1]]
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
rgb_col("gray")
get_edges
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)[[1]]
debug(get_edges)
get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE)
tryCatch(rgb_col(tmp[,color])[1],error=function(e){rgb_col("gray")})
rgb_col(tmp[,color])
rgb_col(tmp[,color])[1]
#' @title get_edges
#' @export
get_edges<-function(obj,color="color",width="size",name="names",type="2d",...){
#set net opts
if(type == "2d"){
opts<-list(mode="lines",type="scatter",...)
} else {
opts<-list(mode="lines",type="scatter3d",...)
}
#split list for element mapping (could be done together?)
# mappings<-obj$edges[,c(color,width),drop=FALSE]
segs<-rep(1:(nrow(obj$edges)/2),each=2)
# if(!is.null(mappings)){
#   id<-lapply(1:nrow(mappings),function(i){
#     paste(paste(mappings[i,],collapse="_"),segs[i])
#   })
#   id<-unlist(id)
#   el<-split(obj$edges,id)
#
# } else {
el<-split(obj$edges,segs) # split all
# }
#need to split into induvidual segments, for 3d and size maping to work
#generate elements
res<-list()
for (i in 1:length(el)){
tmp<-el[[i]]
res[[i]]<-c(list(x=tmp$x,
y=tmp$y,
z=tmp$z,
name = tryCatch(tmp[,name][1],error=function(e){NULL}), # TODO: fix hack
line=list(
color = ifelse(is.null(rgb_col(tmp[,color])[1]),rgb_col("gray"),rgb_col(tmp[,color])[1]),
width = tryCatch(as.numeric(as.character(tmp[,width][1])),error=function(e){5})) # why is this a factor?
),opts)
}
return(res)
}
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
net<-shiny_ly(net)
net
format_legend
legend<-format_legend(obj,node.data=node.data,width=NULL,size=NULL)
width=NULL
size=NULL
res<-list(edges=NULL,nodes=NULL)
edges=TRUE
nodes=TRUE
el<-obj$edges
vars<-c(width,color,name)
id<-el %>% select(one_of(vars)) %>% apply(.,1,paste,collapse="|")
tmp<-el[!duplicated(id),]
tmp$x<-tmp$y<-tmp$z<-NA
res$edges<-tmp
library(dplyr)
el<-obj$edges
vars<-c(width,color,name)
id<-el %>% select(one_of(vars)) %>% apply(.,1,paste,collapse="|")
tmp<-el[!duplicated(id),]
tmp$x<-tmp$y<-tmp$z<-NA
res$edges<-tmp
vars
el
color=NULL
el<-obj$edges
vars<-c(width,color,name)
id<-el %>% select(one_of(vars)) %>% apply(.,1,paste,collapse="|")
tmp<-el[!duplicated(id),]
tmp$x<-tmp$y<-tmp$z<-NA
res$edges<-tmp
res$edges
el<-cbind(obj$nodes,node.data)
vars<-c(size,color,name)
id<-el %>% select(one_of(vars)) %>% apply(.,1,paste,collapse="|")
tmp<-el[!duplicated(id),]
tmp$x<-tmp$y<-tmp$z<-NA
res$nodes<-tmp[,c("x","y","z")]
res$node.data<-tmp
res$node.data
vars
format_legend<-function(obj,edges=TRUE,nodes=TRUE,width='size',color='color',size='size',name='names',node.data){
res<-list(edges=NULL,nodes=NULL)
#edges
if(edges){
el<-obj$edges
vars<-c(width,color,name)
id<-el %>% select(one_of(vars)) %>% apply(.,1,paste,collapse="|")
tmp<-el[!duplicated(id),]
tmp$x<-tmp$y<-tmp$z<-NA
res$edges<-tmp
}
#nodes
if(nodes){
el<-cbind(obj$nodes,node.data)
vars<-c(size,color,name)
id<-el %>% select(one_of(vars)) %>% apply(.,1,paste,collapse="|")
tmp<-el[!duplicated(id),]
tmp$x<-tmp$y<-tmp$z<-NA
res$nodes<-tmp[,c("x","y","z")]
res$node.data<-tmp
}
return(res)
}
legend<-format_legend(obj,node.data=node.data,width=NULL,size=NULL)
legend<-format_legend(obj,node.data=node.data,width=NULL,size=NULL,name=name)
debug(format_legend)
legend<-format_legend(obj,node.data=node.data,width=NULL,size=NULL,name=name)
vars
legend<-format_legend(obj,node.data=node.data,width=NULL,size=NULL,name=name)
vars
id<-el %>% select(one_of(vars)) %>% apply(.,1,paste,collapse="|")
function (vars, xs)
legend<-format_legend(obj,node.data=node.data,width=NULL,size=NULL,name=name,color=NULL)
undebug(format_legend)
net2<-c(net,c(get_edges(legend,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=TRUE),
get_nodes(legend,node.data=legend$node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=TRUE)))
net<-shiny_ly(net2) # with legend?
plotly::layout(net,
xaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'),
yaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'))
net]
net
#create plotting attributes
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
legend<-format_legend(obj,node.data=node.data,width=NULL,size=NULL,name=name,color=NULL)
net2<-c(net,c(get_edges(legend,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=TRUE),
get_nodes(legend,node.data=legend$node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=TRUE)))
library(igraph)
karate <- make_graph("Zachary")
karate$layout <- layout_with_kk(karate)
plot(karate)
fc <- cluster_fast_greedy(karate)
memb <- membership(fc)
plot(karate, vertex.color=memb)
edge.list<-data.frame(get.edgelist(karate,names=TRUE))
edge.list$ID<-"friends"
head(edge.list)
library(network)
nodes<-as.matrix(V(karate))
node.data<-data.frame(ID=nodes,group=as.matrix(memb))
#add color
node.data$color<-rainbow(length(unique(node.data$group)))[factor(node.data$group)]
#add size based on centrality
#rescale to 20-60
library(scales)
node.data$size<-rescale(closeness(karate, mode="all"),to=c(10,40))
head(node.data)
library(networkly)
#net params
layout<-"kamadakawai"
type<-"2d"
color<-'color'
size<-'size'
name<-'ID'
obj<-get_network(edge.list,type=type,layout=layout)
#view
sapply(obj,head)
#create plotting attributes
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
library(networkly)
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
library(igraph)
karate <- make_graph("Zachary")
karate$layout <- layout_with_kk(karate)
plot(karate)
fc <- cluster_fast_greedy(karate)
memb <- membership(fc)
plot(karate, vertex.color=memb)
edge.list<-data.frame(get.edgelist(karate,names=TRUE))
edge.list$ID<-"friends"
head(edge.list)
library(network)
nodes<-as.matrix(V(karate))
node.data<-data.frame(ID=nodes,group=as.matrix(memb))
#add color
node.data$color<-rainbow(length(unique(node.data$group)))[factor(node.data$group)]
#add size based on centrality
#rescale to 20-60
library(scales)
node.data$size<-rescale(closeness(karate, mode="all"),to=c(10,40))
head(node.data)
library(networkly)
#net params
layout<-"kamadakawai"
type<-"2d"
color<-'color'
size<-'size'
name<-'ID'
obj<-get_network(edge.list,type=type,layout=layout)
#view
sapply(obj,head)
#create plotting attributes
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
legend<-c(format_legend(obj,nodes=FALSE,node.data=node.data,width=NULL,size=NULL,name=name,color=NULL),#edge legend
format_legend(obj,edges=FALSE,node.data=node.data,width=NULL,name=NULL,color="group")) #node legend
legend
legend<-c(format_legend(obj,nodes=FALSE,node.data=node.data,width=NULL,size=NULL,name=name,color=NULL),#edge legend
format_legend(obj,edges=FALSE,node.data=node.data,size=NULL,name=NULL,color="group"))
legend
net2<-c(net,c(get_edges(legend,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=TRUE),
get_nodes(legend,node.data=legend$node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=TRUE)))
net<-shiny_ly(net2) # with legend?
plotly::layout(net,
xaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'),
yaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'))
net2<-c(net,c(get_edges(legend,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=TRUE),
get_nodes(legend,node.data=legend$node.data,color="group",size=NULL,name=NULL,type=type,showlegend=TRUE)))
net<-shiny_ly(net2) # with legend?
plotly::layout(net,
xaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'),
yaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE, hoverformat = '.2f'))
net
get_nodes(legend,node.data=legend$node.data,color="group",size=NULL,name=NULL,type=type,showlegend=TRUE)
legend$node.data
legend
format_legend
library(igraph)
karate <- make_graph("Zachary")
karate$layout <- layout_with_kk(karate)
plot(karate)
fc <- cluster_fast_greedy(karate)
memb <- membership(fc)
plot(karate, vertex.color=memb)
edge.list<-data.frame(get.edgelist(karate,names=TRUE))
edge.list$ID<-"friends"
head(edge.list)
library(network)
nodes<-as.matrix(V(karate))
node.data<-data.frame(ID=nodes,group=as.matrix(memb))
#add color
node.data$color<-rainbow(length(unique(node.data$group)))[factor(node.data$group)]
#add size based on centrality
#rescale to 20-60
library(scales)
node.data$size<-rescale(closeness(karate, mode="all"),to=c(10,40))
head(node.data)
library(networkly)
#net params
layout<-"kamadakawai"
type<-"2d"
color<-'color'
size<-'size'
name<-'ID'
obj<-get_network(edge.list,type=type,layout=layout)
#view
sapply(obj,head)
#create plotting attributes
net<-c(get_edges(obj,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=FALSE),
get_nodes(obj,node.data,color=color,size=size,name=name,type=type,hoverinfo="ID",showlegend=FALSE),
get_text(obj,node.data,text=name,extra=list(textfont=list(size=20)),type=type,yoff=-5,hoverinfo="none",showlegend=FALSE))
legend<-c(format_legend(obj,nodes=FALSE,node.data=node.data,width=NULL,size=NULL,name=name,color=NULL),#edge legend
format_legend(obj,edges=FALSE,node.data=node.data,size=NULL,name=NULL,color="group")) #node legend
legend
c(get_edges(legend,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=TRUE)
get_edges(legend,color=NULL,width=NULL,name=name,type=type,hoverinfo="none",showlegend=TRUE)
get_nodes(legend,node.data=legend$node.data,color="group",size=NULL,name=NULL,type=type,showlegend=TRUE)
legend
debug(get_nodes)
get_nodes(legend,node.data=legend$node.data,color="group",size=NULL,name=NULL,type=type,showlegend=TRUE)
